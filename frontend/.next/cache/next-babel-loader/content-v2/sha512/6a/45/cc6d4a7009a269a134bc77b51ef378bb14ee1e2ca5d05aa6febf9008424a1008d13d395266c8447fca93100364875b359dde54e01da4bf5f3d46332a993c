{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport { playerReducer } from \"./playerReducer\";\nexport const rootReducer = combineReducers({\n  player: playerReducer\n});\nexport const reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n};","map":{"version":3,"sources":["d:/visual/js/startReact/startReact1/tryfullstack/tryfrontnew/store/reducers/index.ts"],"names":["HYDRATE","combineReducers","playerReducer","rootReducer","player","reducer","state","action","type","nextState","payload","count"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,WAAW,GAAGF,eAAe,CAAC;AACvCG,EAAAA,MAAM,EAAEF;AAD+B,CAAD,CAAnC;AAKP,OAAO,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgBR,OAApB,EAA6B;AACzB,UAAMS,SAAS,mCACRH,KADQ,GAERC,MAAM,CAACG,OAFC,CAAf;;AAIA,QAAIJ,KAAK,CAACK,KAAV,EAAiBF,SAAS,CAACE,KAAV,GAAkBL,KAAK,CAACK,KAAxB,CALQ,CAKsB;;AAC/C,WAAOF,SAAP;AACH,GAPD,MAOO;AACH,WAAON,WAAW,CAACG,KAAD,EAAQC,MAAR,CAAlB;AACH;AACJ,CAXM","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./playerReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    player: playerReducer\r\n})\r\n\r\n \r\nexport const reducer = (state, action) => {\r\n    if (action.type === HYDRATE) {\r\n        const nextState = {\r\n            ...state, // use previous state\r\n            ...action.payload, // apply delta from hydration\r\n        }\r\n        if (state.count) nextState.count = state.count // preserve count value on client side navigation\r\n        return nextState\r\n    } else {\r\n        return rootReducer(state, action)\r\n    }\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>"]},"metadata":{},"sourceType":"module"}