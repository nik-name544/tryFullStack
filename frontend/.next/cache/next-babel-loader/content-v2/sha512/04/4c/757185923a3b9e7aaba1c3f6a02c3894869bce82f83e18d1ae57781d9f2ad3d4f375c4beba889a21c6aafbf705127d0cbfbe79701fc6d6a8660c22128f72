{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TrackActionTypes } from \"../../types/track\";\nconst initialState = {\n  tracks: [],\n  error: \"\"\n};\nexport const trackReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case TrackActionTypes.FETCH_TRACKS_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    case TrackActionTypes.FETCH_TRACKS:\n      return {\n        error: \"\",\n        tracks: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["d:/visual/js/startReact/startReact1/tryfullstack/tryfrontnew/store/reducers/trackReduser.ts"],"names":["TrackActionTypes","initialState","tracks","error","trackReduser","state","action","type","FETCH_TRACKS_ERROR","payload","FETCH_TRACKS"],"mappings":";;;;;;AAAA,SAAkCA,gBAAlC,QAA0D,mBAA1D;AAEA,MAAMC,YAAwB,GAAG;AAC7BC,EAAAA,MAAM,EAAE,EADqB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAAjC;AAMA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAA2D;AACnF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,gBAAgB,CAACQ,kBAAtB;AACI,6CAAYH,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAAjC;;AACJ,SAAKT,gBAAgB,CAACU,YAAtB;AACI,aAAO;AAAEP,QAAAA,KAAK,EAAE,EAAT;AAAaD,QAAAA,MAAM,EAAEI,MAAM,CAACG;AAA5B,OAAP;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH,CATM","sourcesContent":["import { TrackState, TrackAction, TrackActionTypes } from \"../../types/track\"\r\n\r\nconst initialState: TrackState = {\r\n    tracks: [],\r\n    error: \"\"\r\n}\r\n\r\n\r\nexport const trackReduser = (state = initialState, action: TrackAction): TrackState => {\r\n    switch (action.type) {\r\n        case TrackActionTypes.FETCH_TRACKS_ERROR:\r\n            return { ...state, error: action.payload }\r\n        case TrackActionTypes.FETCH_TRACKS:\r\n            return { error: \"\", tracks: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}